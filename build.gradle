group "com.github.izhangzhihao"
version "1.0-SNAPSHOT"

apply plugin: "java"
apply plugin: "war"
apply plugin: "jacoco"
//apply plugin: "checkstyle"
//apply plugin: "pmd"
//apply plugin: "findbugs"
apply plugin: "idea"

sourceCompatibility = 1.8
targetCompatibility = 1.8
def SpringVersion = "4.3.2.RELEASE"
def SpringBootVersion = "1.4.0.RELEASE"
def HibernateVersion = "5.2.2.Final"
def ShiroVersion = "1.2.6"
def JacksonVersion = "2.8.1"


repositories {
    mavenLocal()
    //内网nexus私服地址
    //maven { url "http://10.16.155.241/nexus/content/groups/public/" }
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    jcenter()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "https://repo.spring.io/libs-snapshot" }
}

dependencies {
    compile(
            // spring framework
            "org.springframework:spring-context:${SpringVersion}",
            "org.springframework:spring-context-support:${SpringVersion}",//启用ehcache缓存
            "org.springframework:spring-web:${SpringVersion}",
            "org.springframework:spring-webmvc:${SpringVersion}",
            "org.springframework:spring-test:${SpringVersion}",
            "org.springframework:spring-beans:${SpringVersion}",
            "org.springframework:spring-expression:${SpringVersion}",
            "org.springframework:spring-aop:${SpringVersion}",
            "org.springframework:spring-aspects:${SpringVersion}",
            "org.springframework:spring-core:${SpringVersion}",
            "org.springframework:spring-instrument:${SpringVersion}",
            "org.springframework:spring-orm:${SpringVersion}",

            //Spring-Session
            "org.springframework.session:spring-session:1.2.1.RELEASE",
            "org.springframework.data:spring-data-redis:1.7.2.RELEASE",

            //jedis
            "redis.clients:jedis:2.9.0",
            "org.apache.commons:commons-pool2:2.4.2",

            //springfox
            "io.springfox:springfox-swagger2:2.5.0",
            "io.springfox:springfox-swagger-ui:2.5.0",

            // MySQL
            "mysql:mysql-connector-java:6.0.2",

            //servlet
            //"javax.servlet:javax.servlet-api:3.1.0",

            //el
            //"javax.el:javax.el-api:3.0.1-b04",

            //jstl
            //"javax.servlet:jstl:1.2",

            //apache
            "commons-fileupload:commons-fileupload:1.3.2",
            "org.apache.commons:commons-lang3:3.4",//深拷贝

            // JSON
            "com.fasterxml.jackson.core:jackson-core:${JacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${JacksonVersion}",
            "com.fasterxml.jackson.core:jackson-annotations:${JacksonVersion}",

            //Hibernate
            "org.hibernate:hibernate-core:${HibernateVersion}",
            "org.hibernate:hibernate-validator:5.2.4.Final",

            //C3P0
            "com.mchange:c3p0:0.9.5.2",
            "org.hibernate:hibernate-c3p0:${HibernateVersion}",

            //ehcache
            "org.ehcache:ehcache:3.1.0",
            "org.hibernate:hibernate-ehcache:${HibernateVersion}",

            //jUnit
            "junit:junit:4.12",

            //Mockito
            //"org.mockito:mockito-core:2.0.99-beta",

            //@NotNull
            "org.jetbrains:annotations:15.0",

            //slf4j
            //"org.slf4j:slf4j-log4j12:1.7.21",
            //"org.slf4j:slf4j-jdk14:1.7.21",
            "org.slf4j:jcl-over-slf4j:1.7.21",//jcl-over-slf4j 把 Commons-Logging 桥接到 Slf4J，然后 Logback。
            "ch.qos.logback:logback-core:1.1.7",
            "ch.qos.logback:logback-classic:1.1.7",

            //shiro
            "org.apache.shiro:shiro-core:${ShiroVersion}",
            "org.apache.shiro:shiro-spring:${ShiroVersion}",
            "org.apache.shiro:shiro-web:${ShiroVersion}",
            "org.apache.shiro:shiro-ehcache:${ShiroVersion}",

            //Groovy
            "org.codehaus.groovy:groovy:2.4.7",

            //Lombok
            "org.projectlombok:lombok:1.16.10",

            //Jetty
            "org.eclipse.jetty:jetty-webapp:9.3.10.v20160621",
            "org.eclipse.jetty.http2:http2-server:9.3.10.v20160621",
            "org.eclipse.jetty:jetty-jsp:9.2.17.v20160517",

    )
    testCompile(
            //jUnit
            "junit:junit:4.12",
    )
}

task copyJars(type: Copy) {
    from configurations.runtime
    into "lib" //复制到lib目录
}

//让gradle支持中文
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

//task checkstyle(type: Checkstyle) {
//    configFile file("/src/main/resources/checkstyle.xml")
//    source 'src'
//    include '**/*.java'
//    //exclude '**/gen/**'
//
//    classpath = files()
//}

//task customFindbugs(type: FindBugs) {
//    ignoreFailures = false
//    effort = "max"
//    reportLevel = "low"
//    classes = files("$project.buildDir/classes")
//
//    // Use this only if you want exclude some errors
//    //excludeFilter = file("$rootProject.rootDir/config/findbugs/exclude.xml")
//
//    source = fileTree('src/main/java/')
//    classpath = files()
//
//    reports {
//        xml.enabled = false
//        xml.withMessages = true
//        html.enabled = !xml.isEnabled()
//        xml.destination "$project.buildDir/findbugs/findbugs-output.xml"
//        html.destination "$project.buildDir/findbugs/findbugs-output.html"
//    }
//}

//findbugs {
//    ignoreFailures = false
//    effort = "max"
//    reportsDir = file("$buildDir/reports/findbugs")
//    //reportLevel = "high"
//    sourceSets = [sourceSets.main]
//}
//
//findbugsMain {
//    reports {
//        html.enabled = true
//        xml.enabled = false
//    }
//}
//
//pmd {
//    ruleSets = ["basic", "braces", "design"]
//    ignoreFailures = true
//    sourceSets = [sourceSets.main]
//}


test {
    useJUnit()
    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

build.dependsOn jacocoTestReport

task integrationTest(type: Test) {
    include 'test/java/**'
}
